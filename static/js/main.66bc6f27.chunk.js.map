{"version":3,"sources":["components/Card/Card.js","components/Card/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundry/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","link","className","alt","src","title","href","CardList","cardArray","robots","map","robot","i","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","getUser","event","a","axios","get","response","users","data","console","searchField","target","value","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uTAiBeA,G,YAfF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC/B,OACE,kBAAC,WAAD,KACE,6BAASC,UAAU,kFACjB,yBAAKA,UAAU,MACb,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BN,EAA1B,YAAwCI,UAAU,+CAA+CG,MAAM,oCAC9H,wBAAIH,UAAU,UAAUH,GACxB,wBAAIG,UAAU,mBAAmBF,GACjC,uBAAGE,UAAU,iFAAiFI,KAAML,GAApG,aCUKM,EAlBE,SAAC,GAAgB,IAIxBC,EAJuB,EAAbC,OAISC,KAAI,SAACC,EAAOC,GACjC,OACI,kBAAC,EAAD,CAAMC,IAAKF,EAAMb,GAAIA,GAAIa,EAAMb,GAAIC,KAAMY,EAAMZ,KAAMC,MAAOW,EAAMX,MAAOC,KAAMU,EAAMV,UAG7F,OACI,kBAAC,WAAD,KACA,6BACKO,KCAEM,EAZG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAClB,OACE,kBAAC,WAAD,KAEA,yBAAKb,UAAU,OACX,2BAAOA,UAAU,mCAAmCc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCKjGI,EATF,SAACC,GAEV,OACI,yBAAKlB,UAAU,GAAGmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC7EJ,EAAMK,WCgBAC,E,kDAnBf,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIhB,OAAGG,KAAKJ,MAAMC,SACH,0DAEJG,KAAKX,MAAMK,a,GAhBCQ,a,iBCkEZC,E,kDA3Db,aAAe,IAAD,8BACZ,gBAOFC,QARc,uCAQJ,WAAOC,GAAP,iBAAAC,EAAA,+EAEiBC,IAAMC,IAC3B,8CAHI,OAEAC,EAFA,OAMAC,EAAQD,EAASE,KACvB,EAAKV,SAAS,CAAEvB,OAAQgC,IAPlB,gDASNE,QAAQd,MAAR,MATM,yDARI,wDA4Bdd,eAAiB,SAACqB,GAChB,EAAKJ,SAAS,CAAEY,YAAaR,EAAMS,OAAOC,SA3B1C,EAAKnB,MAAQ,CACXlB,OAAQ,GACRmC,YAAa,IAJH,E,gEAsBZb,KAAKI,Y,+BAUG,IAAD,OACDY,EAAiBhB,KAAKJ,MAAMlB,OAAOuC,QAAO,SAACrC,GAC/C,OAAOA,EAAMZ,KACVkD,cACAC,SAAS,EAAKvB,MAAMiB,YAAYK,kBAGrC,OAAKlB,KAAKJ,MAAMlB,OAAO0C,OAInB,kBAAC,WAAD,KACE,yBAAKjD,UAAU,MACb,wBAAIA,UAAU,sBAAd,uBACA,kBAAC,EAAD,CAAWa,eAAgBgB,KAAKhB,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUN,OAAQsC,QATnB,wBAAI7C,UAAU,sBAAd,gB,GAzCK+B,aCGEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLc,QAAQd,MAAMA,EAAMwC,c","file":"static/js/main.66bc6f27.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Card = ({ id, name, email, link }) => {\r\n  return (\r\n    <Fragment>\r\n      <article className=\"dib mw5 bg-light-green br3 pa3 pa4-ns mv3 ba b--black-10 ma2 bw1 shadow-5 grow\">\r\n        <div className=\"tc\">\r\n          <img alt='card-img' src={`https://robohash.org/${id}?200x200`} className=\"br-100 h4 w4 dib ba b--black-05 pa2 bg-white\" title=\"Photo of a kitty staring at you\" />\r\n          <h1 className=\"f3 mb2\">{name}</h1>\r\n          <h2 className=\"f5 fw4 gray mt0\">{email}</h2>\r\n          <a className=\"link tc ph3 pv1 db bg-animate bg-dark-blue hover-bg-blue white f6 br1 ma3 grow\" href={link}>Link</a>\r\n        </div>\r\n      </article>\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {\r\n    // if(true){\r\n    //     throw new Error('NOOOOOOOOOOOO')\r\n    // }\r\n    const cardArray = robots.map((robot, i) => {\r\n        return (\r\n            <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} link={robot.link} />\r\n        )\r\n    })\r\n    return (\r\n        <Fragment>\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React, {Fragment} from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n  return (\r\n    <Fragment>\r\n    \r\n    <div className=\"pa2\">\r\n        <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={onSearchChange} />\r\n   </div>\r\n   \r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n    \r\n    return(\r\n        <div className='' style={{overflowY:'scroll',border:'3px solid black', height:'800px'}}>\r\n        {props.children}\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        hasError:false\r\n    }\r\n}\r\n\r\ncomponentDidCatch(error,errorInfo){\r\nthis.setState({hasError:true})\r\n}\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops!. This is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component, Fragment } from \"react\";\r\nimport \"tachyons\";\r\nimport \"./App.css\";\r\nimport CardList from \"../components/Card/CardList\";\r\nimport SearchBox from \"../components/SearchBox/SearchBox\";\r\nimport Scroll from \"../components/Scroll/Scroll\";\r\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry';\r\nimport axios from \"axios\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n  //////////////async AXIOS Call ///////////////////////////\r\n  getUser = async (event) => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n\r\n      const users = response.data;\r\n      this.setState({ robots: users });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUser();\r\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  //     .then((response) => response.json())\r\n  //     .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n\r\n    if (!this.state.robots.length) {\r\n      return <h1 className=\"f1 app-header-text\">Loading!</h1>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <div className=\"tc\">\r\n            <h1 className=\"f1 app-header-text\">Senior Robo Friends</h1>\r\n            <SearchBox onSearchChange={this.onSearchChange} />\r\n            <Scroll>\r\n              <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n          </div>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}